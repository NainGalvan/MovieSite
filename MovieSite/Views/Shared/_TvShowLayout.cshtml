@{
    ViewBag.Title = Html.ViewContext.RouteData.Values["action"];
}


<div class="row row-cols-1 row-cols-md-3">
    @foreach (var show in Model.Shows)
    {
        List<string> genres = new List<string>();
        foreach (var genre in show.genres)
        {
            genres.Add(genre.name);
        }

        <div class="col mb-3">
            <div class="card h-100" role="button" onclick="location.href='@Url.Action("Watch", "TVShows", new { id=show.id })'">
                <div class="card-body">
                    <h5 class  ="card-title">@show.name</h5>
                </div>
                @if (show.poster_path != null)
                {
                    <img class="card-img" src="@Url.Content("https://image.tmdb.org/t/p/w500/" + show.poster_path)" />
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" class="d-block user-select-none" width="100%" height="200" aria-label="Placeholder: Image cap" focusable="false" role="img" preserveAspectRatio="xMidYMid slice" viewBox="0 0 318 180" style="font-size:1.125rem;text-anchor:middle">
                        <rect width="100%" height="100%" fill="#868e96"></rect>
                        <text x="50%" y="50%" fill="#dee2e6" dy=".3em">Image cap</text>
                    </svg>
                }

                <div class="card-body">
                    <p class="card-text">@show.overview</p>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">Seasons: @show.number_of_seasons</li>
                    <li class="list-group-item">Episodes: @show.number_of_episodes</li>
                    <li class="list-group-item">Votes: @show.vote_count</li>
                    <li class="list-group-item">@(show.vote_average * 10)%</li>
                    <li class="list-group-item">
                        @if (show.episode_run_time.Length != 0)
                        {
                            @("RunTime: " + show.episode_run_time[0].ToString() + "min")
                        }
                        else
                        {
                            @("RunTime: " + 0.ToString() + "min")
                        }
                    </li>
                    <li class="list-group-item">
                        @string.Join(",", genres.ToArray())
                    </li>
                </ul>
            </div>
        </div>

    }
</div>
<div>
    <ul class="pagination pagination-lg">
        <li class="@(Model.Page == 1? "page-item disabled" : "page-item ")">
            <a class="page-link" href="@Url.Action((string)Html.ViewContext.RouteData.Values["action"], new { page = Model.Page - 1 })">&laquo;</a>
        </li>
        @for (int i = 1; i <= 10; i++)
        {
            <li class="@(i == Model.Page ? "page-item active" : "page-item")">
                <a class="page-link" href="@Url.Action((string)Html.ViewContext.RouteData.Values["action"], new { page = i })">@i</a>
            </li>

        }
        <li class="@(Model.Page == Model.Total_Page ? "page-item disabled" : "page-item")">
            <a class="page-link" href="@Url.Action((string)Html.ViewContext.RouteData.Values["action"], new { page = Model.Page + 1 })">&raquo;</a>
        </li>
    </ul>
</div>

